using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class ControllerBehaviour : MonoBehaviour {

  public struct Range {
    double start;
    double end;

    public Range(double start, double end) {
      this.start = start;
      this.end = end;
    }

    public bool Contains(double val) {
      return val >= start && val < end;
    }

    public double Scale(double val) {
      return (val - start) / (end - start);
    }

    public static Range Of(double start, double end) {
      return new Range(start, end);
    }
  }

  static readonly Range[] angularRanges = new Range[]{
    Range.Of(-180.0, -90.0),
    Range.Of(-90.0, -45.0),
    Range.Of(-45.0, -15.0),
    Range.Of(-15.0, -5.0),
    Range.Of(-5.0, -1.0),
    Range.Of(-1.0, 0.0),
    Range.Of(0.0, 1.0),
    Range.Of(1.0, 5.0),
    Range.Of(5.0, 15.0),
    Range.Of(15.0, 45.0),
    Range.Of(45.0, 90.0),
    Range.Of(90.0, 180.0),
  };

  static readonly Range[] linearRanges = new Range[]{
    Range.Of(-6.0, -3.0),
    Range.Of(-3.0, -1.0),
    Range.Of(-1.0, 0.0),
    Range.Of(0.0, 1.0),
    Range.Of(1.0, 3.0),
    Range.Of(3.0, 6.0),
  };

  static readonly double[] speeds = new double[]{
    -100.0, // 1000
    -10.0, // 100
    -1.0, // 10
    -0.1, // 1
    0.1,
    1.0,
    10.0,
    100.0,
  };

  Range[] inputRanges;

  WheelJoint2D wheelJoint;
  Rigidbody2D lower;
  Rigidbody2D wheel;
  Transform cart;

  Neural.Network network;

  ulong[] inputNeuronIds;
  ulong[] outputNeuronIds;

  int neuronCount;

  double[] data;
  double[] input;
  double[] output;

  EvaluationBehaviour evaluation;

  void Awake() {
    cart = transform.Find("Cart");
    lower = transform.Find("Cart/Lower").GetComponent<Rigidbody2D>();
    wheel = transform.Find("Cart/Wheel").GetComponent<Rigidbody2D>();
    wheelJoint = wheel.transform.GetComponentInChildren<WheelJoint2D>();

    evaluation = GetComponent<EvaluationBehaviour>();

    // Set up receiving data
    data = new double[angularRanges.Length * 2 + linearRanges.Length * 2];

    // Set up input neuron ids by order
    inputNeuronIds = new ulong[data.Length];
    for (var i = 0; i < inputNeuronIds.Length; i++) {
      inputNeuronIds[i] = (ulong)i;
    }
    AssertHelper.Assert(inputNeuronIds.Length == 36, "Unexpected input neuron id count");
    // Debug.LogFormat("inputNeuronIds: {0}", string.Join(", ", inputNeuronIds.Select(x => x.ToString()).ToArray()));

    // Set up output neuron ids by order _after_ input neuron ids
    outputNeuronIds = new ulong[speeds.Length];
    for (var i = 0; i < outputNeuronIds.Length; i++) {
      outputNeuronIds[i] = (ulong)(inputNeuronIds.Length + i);
    }
    AssertHelper.Assert(outputNeuronIds.Length == 8, "Unexpected output neuron id count");
    AssertHelper.Assert(outputNeuronIds[0] == 36, "Unexpected first output neuron id");
    // Debug.LogFormat("outputNeuronIds: {0}", string.Join(", ", outputNeuronIds.Select(x => x.ToString()).ToArray()));

    List<Range> inputRanges = new List<Range>();
    inputRanges.AddRange(angularRanges); // theta lower
    inputRanges.AddRange(angularRanges); // theta dot lower
    inputRanges.AddRange(linearRanges); // x
    inputRanges.AddRange(linearRanges); // x dot
    this.inputRanges = inputRanges.ToArray();

    SetGenotype(new List<List<double>>(){
      // new List<double>(){-0.4105851976200938,-0.937736589461565,-11.717203538864851,16.81262567639351,0.8983345935121179,-0.568953996989876,-62.72558360360563,-13.233107691630721,-0.7096810545772314,-0.0030297627672553062,-34.19052336830646,-9.835847401991487,-0.6834123493172228,-0.37865123013034463,-10.222394322045147,18.672065790742636,0.05922133522108197,0.3756724135018885,-3.0713442247360945,16.774504464119673,0.37239133892580867,0.9299826119095087,-70.94128902535886,16.467564161866903,-0.5028720069676638,-0.9681254331953824,-83.8579572737217,-3.873644731938839,0.7000390156172216,-0.4521434516645968,-31.719455705024302,15.445232009515166,-0.3440771196037531,-0.9837184669449925,-29.543415270745754,-3.406577641144395,-0.39658160973340273,-0.9582458683289587,-48.48391392733902,-4.883848465979099,-0.009647854603827,-0.5635909647680819,-68.08386978227645,17.621835134923458,0.024859773460775614,0.4497280945070088,-60.88352219667286,14.06299781985581,0.4212391637265682,-0.313864856492728,-0.5177678074687719,-8.17826640792191,0.0755170276388526,-0.21477686101570725,-71.23316323850304,-0.13023046776652336,0.8238120996393263,-0.5808706479147077,-37.89372304454446,-1.2777208629995584,0.6320376275107265,-0.8550217864103615,-35.91747768223286,11.42160413786769,-0.38115396816283464,-0.5817604339681566,-91.1639578640461,-2.0634195767343044,0.6423911503516138,0.1765759438276291,-99.62196662090719,-18.658945821225643,0.15414136974141002,0.13958750013262033,-99.8794988496229,16.2856053840369,-0.8432922051288188,-0.9731450099498034,-89.19814524706453,11.912224423140287,-0.8871543775312603,-0.9315404482185841,-58.23580715805292,-3.2643380109220743,-0.6246744147501886,-0.815202824305743,-66.92429452668875,12.463661395013332,-0.6494254772551358,-0.8482231288217008,-36.01037650369108,11.129167601466179,0.5050841066986322,-0.49649515468627214,-75.42477084789425,1.1338768061250448,-0.31117605045437813,-0.03902730345726013,-1.967903459444642,-1.9522007368505,0.631677411030978,0.44379562698304653,-61.60707038361579,7.529505053535104,-0.643814598210156,-0.30983556481078267,-34.891399554908276,-10.752701070159674,-0.2741919746622443,-0.3357029347680509,-74.00127642322332,7.736230678856373,0.3296442092396319,-0.460467915982008,-48.77378789242357,-1.1689028888940811,-0.16735404916107655,0.12250380823388696,-18.49686331115663,18.99706106632948,0.6816609068773687,0.16280862037092447,-1.9129158230498433,0.6796926911920309,-0.7911368156783283,0.06147148413583636,-84.25644850358367,10.946825118735433,-0.5006127087399364,0.22084569605067372,-86.09906206838787,-9.779684050008655,0.33069680631160736,0.8129945187829435,-44.706264371052384,19.70780113711953,0.19507571123540401,-0.9623049148358405,-48.592313821427524,3.2337942998856306,0.7041959776543081,0.044698372948914766,-6.429099570959806,-12.723212568089366,-0.20224118884652853,0.012456169351935387,-62.86546865012497,3.9369102474302053,-0.9652174194343388,0.49447349086403847,-99.11011073272675,10.506040351465344,0.7948931227438152,-0.5249461126513779,-57.76767411734909,-17.03980947844684,-0.7307580257765949,0.6093389689922333,-46.54338962864131,-9.584464812651277,0.9985494907014072,0.37808885844424367,-87.26657503284514,7.934034578502178,0.9335064073093235,0.2750584934838116,-19.105689483694732,9.819268202409148,-0.6702639786526561,0.24151827953755856,-84.20616313815117,19.998277127742767,-0.584870089776814,0.681703164242208,-7.491148239932954,-11.626767152920365},
      new List<double>(){-13.342868238687515,-13.56983688659966,-1.7721353564411402,13.61422666348517,11.723025375977159,-15.838089808821678,-10.313576236367226,18.542386312037706,18.29288363456726,-4.066263120621443,18.54417845606804,13.494005668908358,-19.744049469009042,-17.5729700922966,4.216922698542476,16.43651407212019,-15.347203174605966,9.128851788118482,4.8788596130907536,-6.316526550799608,-14.985061781480908,16.486230921000242,13.841199111193419,5.712929368019104,1.0863661579787731,8.274935111403465,6.478055464103818,14.185192165896297,13.188495263457298,2.5639207754284143,11.661376105621457,3.479051049798727,-19.334076829254627,-5.579902045428753,-11.273456616327167,-2.194808917120099,16.409997968003154,-16.711748000234365,-8.884111102670431,18.517144825309515,1.4208906423300505,3.663405105471611,-13.996604001149535,-4.098295709118247,-10.41314766742289,3.883677199482918,8.91986801289022,14.446332538500428,15.662250444293022,5.559240663424134,-8.950579911470413,9.055165573954582,17.15512246824801,-6.9713466707617044,-18.68178440257907,-17.138993656262755,14.263389306142926,-5.818195603787899,8.442078363150358,-19.53749747015536,-9.282864117994905,3.6973197013139725,-3.5691273119300604,-15.868016835302114,-1.0722988285124302,5.411460855975747,7.368212044239044,5.547077599912882,5.677809454500675,-8.097928883507848,-10.235546361654997,8.278694227337837,-9.760820977389812,-1.310330806300044,17.462753001600504,11.227439111098647,9.035822991281748,-2.9606040753424168,-14.884094456210732,17.659359946846962,9.846812663599849,-18.891224712133408,2.087304927408695,12.25942355580628,13.241540351882577,1.1808507703244686,19.081436041742563,0.7096120249480045,10.629380717873573,-5.530103696510196,-8.377005960792303,9.739871369674802,10.929216276854277,-6.912070447579026,-18.58100850135088,-16.88486066646874,13.920795461162925,6.292235432192683,-14.738768124952912,5.795465959236026,18.766350522637367,-4.081129459664226,-8.994815554469824,-7.798593211919069,10.621210923418403,-4.044166365638375,-10.93575680628419,5.817432515323162,-18.667124407365918,14.097656374797225,0.15222220681607723,-13.407063744962215,8.676444059237838,-18.919402565807104,8.72450984083116,-19.373126979917288,2.0934924576431513,3.654355313628912,18.8964721839875,10.901340991258621,2.605008687824011,9.424228919669986,13.780218409374356,4.008070016279817,-0.28463675640523434,-1.7355983518064022,6.495688874274492,14.83013709075749,-9.286951161921024,-13.638085527345538,-9.771832711994648,-8.17442118190229,-8.662716345861554,-10.579965161159635,-13.297958979383111,2.0626228116452694,7.700716881081462,-8.179540829733014,15.833069775253534,-9.074923237785697,16.71684362925589,-19.847125243395567,18.47654395736754,11.115806698799133,8.327639754861593,19.581893915310502,16.971703693270683,10.07762435823679,-3.266374859958887,-2.223830269649625,3.3010425232350826,0.13219674117863178,15.534743499010801,-9.399290718138218,14.414696646854281,2.272579986602068,12.043839870020747,-3.69948067702353,-0.2732962090522051,8.021502019837499,17.622972754761577,-12.943616705015302,9.79259549640119,19.96296787634492,-12.023912956938148,17.947358954697847,-16.313969399780035,-16.72950515523553,18.55606246739626,-6.97814816609025,19.026325847953558,-16.484213611111045,-8.102575913071632,14.361761277541518,-7.672808337956667,-5.357979927211998,11.653359001502395,16.282267589122057,5.029095411300659,19.305316768586636,3.763661030679941,-19.926008181646466,16.13364478573203,6.056325379759073,-10.314576514065266,-4.739253064617515,2.669396512210369,16.123344721272588,-17.243740372359753,-14.339977093040943,2.111995527520776,-9.200688283890486,-4.617624701932073,19.760625548660755,1.1776472348719835,5.134752141311765,-15.445098392665386,10.351881179958582,-4.628374222666025,-15.541262663900852,16.616054149344563,18.112457310780883,14.12207811139524,16.52528871782124,15.74623222462833,14.093645140528679,-17.1699130628258,14.602032089605927,12.909732880070806,-14.220565091818571,-3.501560091972351,17.114031380042434,2.279668366536498,-13.368407739326358,3.0590192694216967,9.302141536027193,17.449733773246408,19.974681166931987,2.017456777393818,-8.340657763183117,-10.13156739063561,-15.787193588912487,-5.944397188723087,19.786523263901472,0.3847899194806814,-2.545622466132045,6.712058410048485,13.90287758782506,9.436634993180633,-5.876833265647292,16.41249787993729,-13.126604380086064,-16.430776240304112,-6.760498769581318,19.72234258428216,-10.90331893414259,14.70369610004127,-2.7991111762821674,11.075734430924058,-13.699135584756732,0.6099805980920792,-16.441728556528687,-3.683647643774748,1.76107507199049,-19.178211512044072,-2.0557864382863045,-14.072916638106108,0.1877324841916561,-14.390322118997574,1.2771196942776442,13.544096872210503,9.984019361436367,-1.7767733801156282,10.958111826330423,-5.934420255944133,8.459205096587539,12.712972741574049,-18.337207958102226,9.768351884558797,12.34106662683189,-10.121261421591043,19.579999139532447,18.36855039000511,19.189423704519868,8.421642957255244,19.387393575161695,-9.641126887872815,-12.23387504927814,13.076398652046919,-16.94586261175573,-12.548135221004486,-12.731501087546349,-8.54432299733162,-19.330794773995876,6.831980552524328,-4.7980385553091764,2.9565035086125135,17.99524120055139,-11.053589265793562,19.442311925813556,-11.305881571024656,13.676066100597382,15.513460487127304,4.023512834683061,10.175271956250072,17.59591205045581,16.927435463294387,-4.641360240057111},
    });
  }

  void Start() {
    OnSpawned();
  }

  public void SetGenotype(List<List<double>> genotype) {
    network = new Neural.Network(20);

    // var chromosomeN = genotype[0];
    double a, b, c, d;
    // for (int i = 0; i < Mathf.FloorToInt(chromosomeN.Count / 4); i++) {
    for (int i = 0; i < inputNeuronIds.Length + outputNeuronIds.Length; i++) {
      // a = chromosomeN[(i * 4) + 0];
      // b = chromosomeN[(i * 4) + 1];
      // c = chromosomeN[(i * 4) + 2];
      // d = chromosomeN[(i * 4) + 3];
      a = 0.1;
      b = 0.2;
      c = -65.0;
      d = 2.0;
	    network.AddNeuron(a, b, c, d);
    }

    var chromosomeS = genotype[0];
    var synapseConfigs = chromosomeS.GetEnumerator();

    // Connect each input neuron to the output neuron.
    for (var i = 0; i < inputNeuronIds.Length; i++) {
      for (var j = 0; j < outputNeuronIds.Length; j++) {
        // Debug.LogFormat("{0} => {1}", inputNeuronIds[i], outputNeuronIds[j]);
        if (synapseConfigs.MoveNext()) {
          network.AddSynapse(inputNeuronIds[i], outputNeuronIds[j], synapseConfigs.Current, -40.0f, 40.0f);
        } else {
          UnityEngine.Debug.LogWarning("Ran out of synapses for the output neuron.");
        }
      }
    }

    while (synapseConfigs.MoveNext()) {
      UnityEngine.Debug.LogWarning("Unused synapse configs.");
    }

    neuronCount = (int)network.NeuronCount;
    AssertHelper.Assert(neuronCount == inputNeuronIds.Length + outputNeuronIds.Length,
      "Incorrect neuron count");
  }

  void OnSpawned() {
    // Choose random angle
    cart.transform.localRotation = Quaternion.Euler(0, 0, Random.value > 0.5 ? 185 : 175);
  }

  void OnDespawned() {
    // Reset motor speed
    SetMotorSpeed(0);
  }

  void SetMotorSpeed(float speed) {
    var motor = wheelJoint.motor;
  	motor.motorSpeed = speed;
  	wheelJoint.motor = motor;
  }

	void FixedUpdate() {
    if (evaluation.isComplete) {
      return;
    }

    // Send input
    var thetaLower = AngleHelper.GetAngle(lower.rotation);
    var thetaDotLower = AngleHelper.GetAngle(lower.angularVelocity);
    var x = wheel.transform.localPosition.x;
    var xDot = wheel.velocity.magnitude;

    // Lower world data into array
    int i = 0;
    int len;
    for (len = angularRanges.Length; i < len; i++) {
      data[i] = thetaLower;
    }
    for (len += angularRanges.Length; i < len; i++) {
      data[i] = thetaDotLower;
    }
    for (len += linearRanges.Length; i < len; i++) {
      data[i] = x;
    }
    for (len += linearRanges.Length; i < len; i++) {
      data[i] = xDot;
    }
    // Debug.LogFormat("data: {0}", string.Join(", ", data.Select(d => d.ToString()).ToArray()));

    // Populate input array with data and ranges
    input = new double[neuronCount];

    Range range;
    for (i = 0; i < inputNeuronIds.Length; i++) {
      range = inputRanges[i];
      if (range.Contains(data[i])) {
        input[inputNeuronIds[i]] = 40.0f * range.Scale(data[i]);
      }
    }
    // Debug.LogFormat("input: {0}", string.Join(", ", input.Select(d => d.ToString()).ToArray()));

    // Receive output
    var ticks = (ulong)(Time.fixedDeltaTime * 1000.0f);
    output = new double[neuronCount];
    network.Tick(ticks, input, ref output);
    // Debug.LogFormat("output: {0}", string.Join(", ", output.Select(d => d.ToString()).ToArray()));

    // Read out neuron V for speed
    float speed = 0.0f;
    for (i = 0; i < outputNeuronIds.Length; i++) {
      speed += (float)((output[outputNeuronIds[i]] / 30.0) * speeds[i]);
    }
    // Debug.LogFormat("speed: {0}", speed);

    // Update motor speed
    SetMotorSpeed(speed);
	}
}
