using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class ControllerBehaviour : MonoBehaviour {

  public struct Range {
    double start;
    double end;

    public Range(double start, double end) {
      this.start = start;
      this.end = end;
    }

    public bool Contains(double val) {
      return val >= start && val < end;
    }

    public double Scale(double val) {
      return (val - start) / (end - start);
    }

    public static Range Of(double start, double end) {
      return new Range(start, end);
    }
  }

  static readonly Range[] angularRanges = new Range[]{
    Range.Of(-180.0, -90.0),
    Range.Of(-90.0, -45.0),
    Range.Of(-45.0, -15.0),
    Range.Of(-15.0, -5.0),
    Range.Of(-5.0, -1.0),
    Range.Of(-1.0, 0.0),
    Range.Of(0.0, 1.0),
    Range.Of(1.0, 5.0),
    Range.Of(5.0, 15.0),
    Range.Of(15.0, 45.0),
    Range.Of(45.0, 90.0),
    Range.Of(90.0, 180.0),
  };

  static readonly Range[] linearRanges = new Range[]{
    Range.Of(-6.0, -3.0),
    Range.Of(-3.0, -1.0),
    Range.Of(-1.0, 0.0),
    Range.Of(0.0, 1.0),
    Range.Of(1.0, 3.0),
    Range.Of(3.0, 6.0),
  };

  static readonly double[] speeds = new double[]{
    -100.0, // 1000
    -10.0, // 100
    -1.0, // 10
    -0.1, // 1
    0.1,
    1.0,
    10.0,
    100.0,
  };

  Range[] inputRanges;

  WheelJoint2D wheelJoint;
  Rigidbody2D lower;
  Rigidbody2D wheel;
  Transform cart;

  Neural.Network network;

  ulong[] inputNeuronIds;
  ulong[] outputNeuronIds;

  int neuronCount;

  double[] data;
  double[] input;
  double[] output;

  EvaluationBehaviour evaluation;

  void Awake() {
    cart = transform.Find("Cart");
    lower = transform.Find("Cart/Lower").GetComponent<Rigidbody2D>();
    wheel = transform.Find("Cart/Wheel").GetComponent<Rigidbody2D>();
    wheelJoint = wheel.transform.GetComponentInChildren<WheelJoint2D>();

    evaluation = GetComponent<EvaluationBehaviour>();

    // Set up receiving data
    data = new double[angularRanges.Length * 2 + linearRanges.Length * 2];

    // Set up input neuron ids by order
    inputNeuronIds = new ulong[data.Length];
    for (var i = 0; i < inputNeuronIds.Length; i++) {
      inputNeuronIds[i] = (ulong)i;
    }
    AssertHelper.Assert(inputNeuronIds.Length == 36, "Unexpected input neuron id count");
    // Debug.LogFormat("inputNeuronIds: {0}", string.Join(", ", inputNeuronIds.Select(x => x.ToString()).ToArray()));

    // Set up output neuron ids by order _after_ input neuron ids
    outputNeuronIds = new ulong[speeds.Length];
    for (var i = 0; i < outputNeuronIds.Length; i++) {
      outputNeuronIds[i] = (ulong)(inputNeuronIds.Length + i);
    }
    AssertHelper.Assert(outputNeuronIds.Length == 8, "Unexpected output neuron id count");
    AssertHelper.Assert(outputNeuronIds[0] == 36, "Unexpected first output neuron id");
    // Debug.LogFormat("outputNeuronIds: {0}", string.Join(", ", outputNeuronIds.Select(x => x.ToString()).ToArray()));

    List<Range> inputRanges = new List<Range>();
    inputRanges.AddRange(angularRanges); // theta lower
    inputRanges.AddRange(angularRanges); // theta dot lower
    inputRanges.AddRange(linearRanges); // x
    inputRanges.AddRange(linearRanges); // x dot
    this.inputRanges = inputRanges.ToArray();

    SetGenotype(new List<List<double>>(){
      // new List<double>(){-0.4105851976200938,-0.937736589461565,-11.717203538864851,16.81262567639351,0.8983345935121179,-0.568953996989876,-62.72558360360563,-13.233107691630721,-0.7096810545772314,-0.0030297627672553062,-34.19052336830646,-9.835847401991487,-0.6834123493172228,-0.37865123013034463,-10.222394322045147,18.672065790742636,0.05922133522108197,0.3756724135018885,-3.0713442247360945,16.774504464119673,0.37239133892580867,0.9299826119095087,-70.94128902535886,16.467564161866903,-0.5028720069676638,-0.9681254331953824,-83.8579572737217,-3.873644731938839,0.7000390156172216,-0.4521434516645968,-31.719455705024302,15.445232009515166,-0.3440771196037531,-0.9837184669449925,-29.543415270745754,-3.406577641144395,-0.39658160973340273,-0.9582458683289587,-48.48391392733902,-4.883848465979099,-0.009647854603827,-0.5635909647680819,-68.08386978227645,17.621835134923458,0.024859773460775614,0.4497280945070088,-60.88352219667286,14.06299781985581,0.4212391637265682,-0.313864856492728,-0.5177678074687719,-8.17826640792191,0.0755170276388526,-0.21477686101570725,-71.23316323850304,-0.13023046776652336,0.8238120996393263,-0.5808706479147077,-37.89372304454446,-1.2777208629995584,0.6320376275107265,-0.8550217864103615,-35.91747768223286,11.42160413786769,-0.38115396816283464,-0.5817604339681566,-91.1639578640461,-2.0634195767343044,0.6423911503516138,0.1765759438276291,-99.62196662090719,-18.658945821225643,0.15414136974141002,0.13958750013262033,-99.8794988496229,16.2856053840369,-0.8432922051288188,-0.9731450099498034,-89.19814524706453,11.912224423140287,-0.8871543775312603,-0.9315404482185841,-58.23580715805292,-3.2643380109220743,-0.6246744147501886,-0.815202824305743,-66.92429452668875,12.463661395013332,-0.6494254772551358,-0.8482231288217008,-36.01037650369108,11.129167601466179,0.5050841066986322,-0.49649515468627214,-75.42477084789425,1.1338768061250448,-0.31117605045437813,-0.03902730345726013,-1.967903459444642,-1.9522007368505,0.631677411030978,0.44379562698304653,-61.60707038361579,7.529505053535104,-0.643814598210156,-0.30983556481078267,-34.891399554908276,-10.752701070159674,-0.2741919746622443,-0.3357029347680509,-74.00127642322332,7.736230678856373,0.3296442092396319,-0.460467915982008,-48.77378789242357,-1.1689028888940811,-0.16735404916107655,0.12250380823388696,-18.49686331115663,18.99706106632948,0.6816609068773687,0.16280862037092447,-1.9129158230498433,0.6796926911920309,-0.7911368156783283,0.06147148413583636,-84.25644850358367,10.946825118735433,-0.5006127087399364,0.22084569605067372,-86.09906206838787,-9.779684050008655,0.33069680631160736,0.8129945187829435,-44.706264371052384,19.70780113711953,0.19507571123540401,-0.9623049148358405,-48.592313821427524,3.2337942998856306,0.7041959776543081,0.044698372948914766,-6.429099570959806,-12.723212568089366,-0.20224118884652853,0.012456169351935387,-62.86546865012497,3.9369102474302053,-0.9652174194343388,0.49447349086403847,-99.11011073272675,10.506040351465344,0.7948931227438152,-0.5249461126513779,-57.76767411734909,-17.03980947844684,-0.7307580257765949,0.6093389689922333,-46.54338962864131,-9.584464812651277,0.9985494907014072,0.37808885844424367,-87.26657503284514,7.934034578502178,0.9335064073093235,0.2750584934838116,-19.105689483694732,9.819268202409148,-0.6702639786526561,0.24151827953755856,-84.20616313815117,19.998277127742767,-0.584870089776814,0.681703164242208,-7.491148239932954,-11.626767152920365},
      new List<double>(){-14.815839556977153,-12.772218100726604,3.575095590204004,4.867420941591263,-19.770870534703135,9.291597940027714,-18.515835152938962,-19.001321904361248,-13.35314329713583,-4.051248524338007,8.543766681104898,3.4980100952088833,5.538396146148443,8.45753151923418,-17.547379536554217,0.5044423975050449,13.023724453523755,-12.548554949462414,-15.528390808030963,8.619956960901618,-16.735819168388844,-6.021218467503786,5.8652579970657825,12.633459558710456,11.05536657385528,-17.443309128284454,17.23126681521535,19.760080240666866,-3.883500313386321,4.839021610096097,-14.886149792000651,-13.624673951417208,-5.968465581536293,17.039561523124576,0.9315096959471703,-10.264541991055012,-4.545796616002917,15.512483566999435,16.637370055541396,17.124237846583128,-2.5047994777560234,-1.3722018990665674,1.8846908025443554,-5.636935047805309,-2.582071041688323,15.855998797342181,16.298018973320723,16.177941439673305,19.16912207379937,-0.23647251538932323,3.575355065986514,8.363029807806015,13.197161862626672,-2.918536737561226,-4.169972101226449,-3.3722235448658466,13.189106322824955,8.820876609534025,-8.25321177020669,-13.361866567283869,-8.348831348121166,0.5918049719184637,10.461416868492961,-3.7783812545239925,0.5546245630830526,11.405268842354417,9.831338562071323,9.388004699721932,-8.095604134723544,-4.589224169030786,-15.742726596072316,16.152315828949213,-18.188545210286975,0.8951056934893131,-9.263947559520602,-4.864080073311925,-6.050537554547191,-6.166610214859247,-5.558754038065672,-17.248594146221876,10.39079587906599,-11.34237289428711,-18.02547352388501,-17.77894047088921,-5.002419063821435,-8.992409575730562,-3.44379180110991,-13.051136452704668,0.9986321162432432,8.17070184275508,19.298183601349592,1.9570871163159609,7.328188801184297,-11.511037833988667,-17.094620391726494,-9.570957757532597,-19.81576954945922,19.947320371866226,9.744197903200984,16.89754042774439,6.674456223845482,7.840623687952757,-1.7142997216433287,-0.8853474725037813,-17.837978852912784,9.093558629974723,-2.6869752071797848,-18.34508898667991,-19.513954985886812,18.213134771212935,4.285356495529413,-4.454773385077715,1.359480144456029,1.9632382411509752,-6.144211674109101,9.334860872477293,17.143458956852555,-18.79899480380118,8.217614153400064,-7.444109749048948,15.286531699821353,9.235919648781419,16.339750587940216,-16.114473324269056,-10.16169629059732,-4.449369693174958,17.707527931779623,13.840274838730693,-16.25191875733435,-11.426171222701669,6.591694802045822,3.1418724730610847,11.668899562209845,-11.370930364355445,18.142610723152757,-7.186792064458132,4.600307606160641,-16.611963929608464,5.7546325493603945,-9.00433361530304,-12.35064729116857,-8.113295398652554,-14.086175197735429,4.286587908864021,8.845770210027695,-4.617539728060365,-15.207607252523303,-13.868363639339805,-16.08660160563886,3.298557288944721,-8.345300825312734,-7.845399845391512,3.1775403767824173,-14.332165066152811,-7.205565990880132,9.804602609947324,-6.531106745824218,-19.45178683847189,-0.8912952709943056,-14.312751470133662,17.40139616653323,12.306773466989398,7.441585082560778,-14.175948780030012,9.139691013842821,5.958569515496492,3.2623418420553207,19.777823043987155,-4.34225270524621,17.822578977793455,-9.374908348545432,-18.8289678376168,14.328858740627766,-12.923079775646329,16.9214809499681,6.4721995778381824,-3.7801209278404713,5.9833622723817825,16.931546041741967,-9.80873379856348,11.171887833625078,-13.48660777322948,1.865060981363058,-5.9089041873812675,-16.80539021268487,-1.5088096912950277,19.63534004986286,-4.310995796695352,-13.416434414684772,0.13744655065238476,-8.749888688325882,-3.1352186761796474,-9.588141739368439,-8.206209922209382,0.28239562176167965,-4.0472079161554575,10.416288552805781,-19.237261600792408,-1.4793768990784883,5.451903734356165,-16.650003185495734,-5.491064693778753,17.805872606113553,9.175376379862428,-18.2528736628592,-12.1102652605623,-16.428108755499125,9.287277208641171,-15.654424726963043,-13.953759474679828,-17.625055853277445,17.83072325401008,11.910236524417996,-1.8590663559734821,-3.0008640699088573,5.982993738725781,5.995732508599758,2.7129564248025417,10.976516660302877,9.906006585806608,-18.918138602748513,-8.626575889065862,4.448778349906206,5.900564631447196,-17.57576433941722,-4.397273072972894,3.641507374122739,-17.125307898968458,-14.14715874940157,6.4784186985343695,19.08687104471028,11.410246649757028,-15.777808539569378,13.74182160012424,18.785767322406173,-4.971069181337953,10.003236830234528,-10.045126853510737,13.047009697183967,8.32253779284656,-0.2568764891475439,-7.496367990970612,13.770078802481294,14.130734447389841,11.456078803166747,19.311849856749177,8.23826770298183,-17.61770101264119,-2.1460813377052546,15.725013613700867,18.53395220823586,0.5649812147021294,7.226937087252736,16.71028365381062,-6.831252295523882,15.220918403938413,4.887834973633289,2.6768881920725107,-7.3567986860871315,8.61414635553956,5.166504615917802,6.581677263602614,-10.679020723327994,-15.826106956228614,6.49902855977416,-2.181065771728754,-13.269486762583256,8.59357233159244,-15.68250929005444,-7.183136474341154,-17.913068095222116,-4.47595757432282,4.816823350265622,12.28936799801886,0.4968971200287342,7.507835905998945,-12.949238801375031,15.443091383203864,-17.142407288774848,-3.1393470149487257,-9.99898487702012,5.85405713878572,10.771160461008549,-16.610297579318285,0.9340982418507338,-15.034872684627771,-16.034303018823266,2.127507496625185},
    });
  }

  void Start() {
    OnSpawned();
  }

  public void SetGenotype(List<List<double>> genotype) {
    network = new Neural.Network(20);

    // var chromosomeN = genotype[0];
    double a, b, c, d;
    // for (int i = 0; i < Mathf.FloorToInt(chromosomeN.Count / 4); i++) {
    for (int i = 0; i < inputNeuronIds.Length + outputNeuronIds.Length; i++) {
      // a = chromosomeN[(i * 4) + 0];
      // b = chromosomeN[(i * 4) + 1];
      // c = chromosomeN[(i * 4) + 2];
      // d = chromosomeN[(i * 4) + 3];
      a = 0.1;
      b = 0.2;
      c = -65.0;
      d = 2.0;
	    network.AddNeuron(a, b, c, d);
    }

    var chromosomeS = genotype[0];
    var synapseConfigs = chromosomeS.GetEnumerator();

    // Connect each input neuron to the output neuron.
    for (var i = 0; i < inputNeuronIds.Length; i++) {
      for (var j = 0; j < outputNeuronIds.Length; j++) {
        // Debug.LogFormat("{0} => {1}", inputNeuronIds[i], outputNeuronIds[j]);
        if (synapseConfigs.MoveNext()) {
          network.AddSynapse(inputNeuronIds[i], outputNeuronIds[j], synapseConfigs.Current, -40.0f, 40.0f);
        } else {
          UnityEngine.Debug.LogWarning("Ran out of synapses for the output neuron.");
        }
      }
    }

    while (synapseConfigs.MoveNext()) {
      UnityEngine.Debug.LogWarning("Unused synapse configs.");
    }

    neuronCount = (int)network.NeuronCount;
    AssertHelper.Assert(neuronCount == inputNeuronIds.Length + outputNeuronIds.Length,
      "Incorrect neuron count");
  }

  void OnSpawned() {
    // Choose random angle
    cart.transform.localRotation = Quaternion.Euler(0, 0, Random.value > 0.5 ? 185 : 175);
  }

  void OnDespawned() {
    // Reset motor speed
    SetMotorSpeed(0);
  }

  void SetMotorSpeed(float speed) {
    var motor = wheelJoint.motor;
  	motor.motorSpeed = speed;
  	wheelJoint.motor = motor;
  }

	void FixedUpdate() {
    if (evaluation.isComplete) {
      return;
    }

    // Send input
    var thetaLower = AngleHelper.GetAngle(lower.rotation);
    var thetaDotLower = AngleHelper.GetAngle(lower.angularVelocity);
    var x = wheel.transform.localPosition.x;
    var xDot = wheel.velocity.magnitude;

    // Lower world data into array
    int i = 0;
    int len;
    for (len = angularRanges.Length; i < len; i++) {
      data[i] = thetaLower;
    }
    for (len += angularRanges.Length; i < len; i++) {
      data[i] = thetaDotLower;
    }
    for (len += linearRanges.Length; i < len; i++) {
      data[i] = x;
    }
    for (len += linearRanges.Length; i < len; i++) {
      data[i] = xDot;
    }
    // Debug.LogFormat("data: {0}", string.Join(", ", data.Select(d => d.ToString()).ToArray()));

    // Populate input array with data and ranges
    input = new double[neuronCount];

    Range range;
    for (i = 0; i < inputNeuronIds.Length; i++) {
      range = inputRanges[i];
      if (range.Contains(data[i])) {
        input[inputNeuronIds[i]] = 40.0f * range.Scale(data[i]);
      }
    }
    // Debug.LogFormat("input: {0}", string.Join(", ", input.Select(d => d.ToString()).ToArray()));

    // Receive output
    var ticks = (ulong)(Time.fixedDeltaTime * 1000.0f);
    output = new double[neuronCount];
    network.Tick(ticks, input, ref output);
    // Debug.LogFormat("output: {0}", string.Join(", ", output.Select(d => d.ToString()).ToArray()));

    // Read out neuron V for speed
    float speed = 0.0f;
    for (i = 0; i < outputNeuronIds.Length; i++) {
      speed += (float)((output[outputNeuronIds[i]] / 30.0) * speeds[i]);
    }
    // Debug.LogFormat("speed: {0}", speed);

    // Update motor speed
    SetMotorSpeed(speed);
	}
}
